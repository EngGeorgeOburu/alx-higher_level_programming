Test cases for 0-add_integer module
___________________________________
___________________________________

The 0-add_integer module takes two integers or even float as arguements and return their total

Usage:
_____________________
import unittest
add_integer = __import__('0-add_integer.py').add_integer

class TestAddInteger(unittest, TestCase):
    
    def (test_add_integer(self):
        # Test adding two integers
        self.assertEqual(add_integer(0, 0), 0)
        self.assertEqual(add_integer(0, 16), 16)
        self.assertEqual(add_integer(16, 0), 16)
        self.assertEqual(add_integer(-3, 3), 0)
        self.assertEqual(add_integer(3, -3), 0)

    def test_add_default_value(self):
        /* Test adding an integer with default value.*/
        self.assertEqual(add_integer(2), 100)

    def test_invalid_type_a(self):
        """Test if TypeError is raised for invalid type ofa """
        with self.assertRaises(TypeError):
            add_integer('a', 'b')
        with self.assertRaises(TypeError):
            add_integer('a', 32)
        with self.assertRaises(TypeError):
            add_integer('a')

    def test_invalid_type_b(self):
        with self.assertRaises(TypeError):
            add_integer(32, 'b')

    def test_value_error(self):
        with self.assertRaises(ValueError):
            add_integer(0, float('nan')
        with self.assertRaises(ValueError):
            add_integer(float('nan'), 0)

if __name__ == '__main__':
    unittest.main()


